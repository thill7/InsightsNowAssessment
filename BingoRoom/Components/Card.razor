@using BingoRoom.Bingo75
<div class="bg-secondary p-2 m-2 rounded">
    <p class="alert alert-info">Remaining: @(MyCard.CountSquaresRemaining)</p>
    <table class="table table-info">
        @for (var i = 0; i < Rows; i++)
        {
            <tr>
                @for (var j = 0; j < Columns; j++)
                {
                    if (_squares.Count <= i * Columns + j)
                    {
                        break;
                    }
                    var square = _squares[i * Columns + j];
                    <td>
                        @if (MyCard.IsChecked(square))
                        {
                            <button disabled class="btn btn-success btn-block">@square</button>
                        }
                        else
                        {
                            <button @onclick="@(e => CheckSquare(square))" class="btn btn-success btn-block">@square</button>
                        }
                    </td>
                }
            </tr>
        }
    </table>
    @if (MyCard.CountSquaresRemaining <= 1)
    {
        <button @onclick="@(e => CallBingo())" class="btn btn-success btn-block">Call Bingo</button>
    }
</div>

@code {

    [Parameter]
    public Bingo BingoComponent { get; set; }

    [Parameter]
    public IGame.ICard MyCard { get; set; }

    private List<int> _squares;
        private const int Columns = 5;
    private int Rows => (int) Math.Ceiling(1.0 * _squares.Count / Columns);

    protected override void OnInitialized()
    {
        _squares = MyCard.Squares.OrderBy(n => n).ToList();
    }

    private void CheckSquare(int square)
    {
        MyCard.Check(square);
    }

    private void CallBingo()
    {
        BingoComponent.CallBingo(MyCard);
    }
}